{
  :simlayer-threshold 500
  :profiles {
      :Default { :default true
          :sim     50     ;; simultaneous_threshold_milliseconds (def: 50)
                          ;; keys need to be pressed within this threshold to be considered simultaneous
          :delay   300    ;; to_delayed_action_delay_milliseconds (def: 500)
                          ;; basically it means time after which the key press is count delayed
          :alone   300    ;; to_if_alone_timeout_milliseconds (def: 1000)
                          ;; hold for 995s and single tap registered; hold for 1005s and seen as modifier
          :held    500    ;; to_if_held_down_threshold_milliseconds (def: 500)
                          ;; key is fired twice when 500 ms is elapsed (otherwise seen as a hold command)
      }
  }
 :devices {
           :rd-fizz [{:product_id 0x49 :vendor_id 0x258a }]
           }

 :simlayers {
             :f-mode {:key :f}    ; delimeters    ( ) [ ] { } and other symbols ~ $ &
             :d-mode {:key :d}    ; arithmetic    + - * / = % < > #
             :s-mode {:key :s}    ; punctuation   ? ! : ; ' " ` ~
             :a-mode {:key :a}    ; navigation hjkl + tab + enter + page down/up
             ;
             :q-mode {:key :q}    ; General shortcuts (browser etc.) - not settled
             :w-mode {:key :w}    ; Selection left and right (letter, word, line)
             :e-mode {:key :e}    ; Movement left and right (letter, word, line)
             :r-mode {:key :r}    ; Deletion left and right (letter, word, line)
             ;
             :g-mode {:key :g}    ; Mouse scroll, desktop left-right, zoom in-out, screenshot (not implemented)
             ;
             :v-mode {:key :v}    ; Number pad with + - BS ENTER as well
             :c-mode {:key :c}    ; Slashes and lines  ^ | \ _ @
             :x-mode {:key :x}    ; Some multi-character shortcuts like <= (not implemented)
             }

 :main [

        ; {:des "Swap Win and Alt on Sculpt keyboard"
        ;  :rules [:rd-fizz
        ;          [:left_option :left_command]
        ;          [:left_command :left_option]
        ;          [:right_option :right_command]
        ;          [:application :right_option]
        ;          ]
        ;  }
        ;
        ; {:des "CAPSLOCK is CTRL if pressed in combination, otherwise ESC"
        ;  :rules  [
        ;     [:##caps_lock        :left_control     nil         {:alone :escape}]
        ;   ]}
        {
         :des "open Ghostty"
         :rules [[:!Oc "open -a Ghostty"]]
        }

        {
         :des "Switch monitor input source"
          :rules [[:!Od "/opt/homebrew/bin/betterdisplaycli set --ddcAlt=145 --vcp=inputSelectAlt"]]
        }

        {:des "f-mode for delimeters and ! ? $"
         :rules [:f-mode 
                 ;; u i j k m comma -> !Sopen_bracket !Sclose_bracket !S9 !S0 open_bracket close_bracket
                 [:##u :!Sopen_bracket :rd-fizz]
                 [:##i :!Sclose_bracket :rd-fizz]
                 [:##j :!S9 :rd-fizz]
                 [:##k :!S0 :rd-fizz]
                 [:##m :open_bracket :rd-fizz]
                 [:##comma :close_bracket :rd-fizz]
                 ;; o l period -> !S1 !Sslash !S4
                 [:##o :!S1 :rd-fizz]
                 [:##l :!Sslash :rd-fizz]
                 [:##period :!S4 :rd-fizz]
                ]
         }

        {:des "d-mode for arithmetic"    ;;    < > #    + - =    * / %
         :rules [:d-mode
                  [:##u     :!Scomma :rd-fizz]               ; d -> o        <
                  [:##i    :!Speriod :rd-fizz]               ; d -> p        >
                  [:##o         :!S3 :rd-fizz]               ; d -> o        #

                  [:##j         :!Sequal_sign :rd-fizz]      ; d -> j        +
                  [:##k         :hyphen :rd-fizz]            ; d -> k        -
                  [:##l         :equal_sign :rd-fizz]        ; d -> l        =

                  [:##m :!S8 :rd-fizz]                       ; d -> m        *
                  [:##comma :slash :rd-fizz]                 ; d -> ,        /
                  [:##period :!S5 :rd-fizz]                  ; d -> .        %
                ]
         }

        {:des "s-mode for punctuation"   ;;    ' " `    , . &    ; : ~
         :rules [:s-mode
                 [:##u :quote :rd-fizz]
                 [:##i :!Squote :rd-fizz]
                 [:##o :grave_accent_and_tilde :rd-fizz]
                 [:##j :comma :rd-fizz]
                 [:##k :period :rd-fizz]
                 [:##l :!S7 :rd-fizz]
                 [:##m :semicolon :rd-fizz]
                 [:##comma :!Ssemicolon :rd-fizz]
                 [:##period :!Sgrave_accent_and_tilde :rd-fizz]
                ]
         }

        {:des "a-mode for hjkl movement and nm enter and ui tab and ,. PageDn/Up"
         :rules [:a-mode
                  [:##h :left_arrow :rd-fizz]
                  [:##j :down_arrow :rd-fizz]
                  [:##k :up_arrow :rd-fizz]
                  [:##l :right_arrow :rd-fizz]
                  [:##n :return_or_enter :rd-fizz]
                  [:##m :return_or_enter :rd-fizz]
                  [:##u :tab :rd-fizz]
                  [:##i :tab :rd-fizz]
                  [:comma :page_down :rd-fizz]
                  [:period :page_up :rd-fizz]
                ]
         }

        {:des "r-mode for deleting characters with ui, words with jk and lines with hl"
         :rules [:r-mode
                  [:##u :delete_or_backspace :rd-fizz]   ; r -> j   Delete word backwards
                  [:##i :delete_forward :rd-fizz]        ; r -> j   Delete word backwards
                  [:##j :!Odelete_or_backspace :rd-fizz] ; r -> j   Delete word backwards
                  [:##k :!Odelete_forward :rd-fizz]      ; r -> k   Delete word forwards
                  [:##h :!Cdelete_or_backspace :rd-fizz] ; r -> h   Delete to beginning of line
                  [:##l :!Cdelete_forward :rd-fizz]      ; r -> l   Delete to end of line
                ]
         }

        {:des "e-mode allows for easy back and forth one character, word or line"
         :rules [:e-mode
                  [:##u         :left_arrow :rd-fizz]          ; e -> u    Left
                  [:##i         :right_arrow :rd-fizz]         ; e -> i    Right
                  [:##j         :!Oleft_arrow :rd-fizz]        ; e -> j    Opt+Left
                  [:##k         :!Oright_arrow :rd-fizz]       ; e -> k    Opt+Right
                  [:##h         :!Cleft_arrow :rd-fizz]        ; e -> h    Cmd+Left
                  [:##l         :!Cright_arrow :rd-fizz]       ; e -> l    Cmd+Right
                  [:n           :return_or_enter :rd-fizz]     ; e -> n    Enter
                  [:m           :return_or_enter :rd-fizz]     ; e -> m    Enter
                ]
         }

        {:des "w-mode = e-mode + SHIFT (i.e. selection, not just movement)"
         :rules [:w-mode
                  [:##u         :!Sleft_arrow :rd-fizz]         ; e -> u    Shift+Left
                  [:##i         :!Sright_arrow :rd-fizz]        ; e -> i    Shift+Right
                  [:##j         :!SOleft_arrow :rd-fizz]        ; e -> j    Shift+Opt+Left
                  [:##k         :!SOright_arrow :rd-fizz]       ; e -> k    Shift+Opt+Right
                  [:##h         :!SCleft_arrow :rd-fizz]        ; e -> h    Shift+Cmd+Left
                  [:##l         :!SCright_arrow :rd-fizz]       ; e -> l    Shift+Cmd+Right
                ]
         }

        {:des "q-mode for general shortcuts like browser tab navigation"
         :rules [:q-mode
                  [:##j :!CSopen_bracket :rd-fizz]  ; q -> j    tab to the left:  Cmd-{
                  [:##k :!CSclose_bracket :rd-fizz] ; q -> k    tab to the right: Cmd-}
                  [:##l :!TCf            :rd-fizz]  ; q -> l    toggle full screen: ^âŒ˜F
                  [:##u :!Cclose_bracket :rd-fizz]  ; q -> u    browser back:     Cmd-[
                  [:##i :!Cclose_bracket :rd-fizz]  ; q -> i    browser forward:  Cmd-]
                  [:##o :f2              :rd-fizz]  ; q -> o    F2 (useful in Excel)
                  [:##p :f4              :rd-fizz]  ; q -> p    F4 (useful in Excel)
                ]
         }

        {:des "v-mode for number pad"
         :rules [:v-mode
                 [:u :7 :rd-fizz]
                 [:i :8 :rd-fizz]
                 [:o :9 :rd-fizz]
                 [:j :4 :rd-fizz]
                 [:k :5 :rd-fizz]
                 [:l :6 :rd-fizz]
                 [:m :1 :rd-fizz]
                 [:comma :2 :rd-fizz]
                 [:period :3 :rd-fizz]
                 [:p :!Sequal_sign :rd-fizz]
                 [:semicolon :hyphen :rd-fizz]
                 [:slash :return_or_enter :rd-fizz]
                 [:y :delete_or_backspace :rd-fizz]
                 [:h :period :rd-fizz]
                 [:n :0 :rd-fizz]
                ]
        }

        {:des "c-mode for remaining symbols ^ | \\ _ @"
         :rules [:c-mode
                 [:##u :!S6 :rd-fizz]
                 [:##j :!Sbackslash :rd-fizz]
                 [:##k :!S2 :rd-fizz]
                 [:##m :backslash :rd-fizz]
                 [:##comma :!Shyphen :rd-fizz]
                ]
        }

        #_{:des "x-mode for some programming pairs like <= (not yet implemented)"
         :rules [:x-mode
                ]
        }

        #_{:des "g-mode for mouse scroll, desktop left-right, zoom in-out, screenshot"
         :rules [:g-mode
                ]
        }

        ; {:des "Forward slash is an easier right-shift (if combined)"
        ;  :rules  [
        ;     [:slash        :left_shift     nil         {:alone :slash}]
        ;   ]}

        ;; Using keys for CTRL etc (home-row-mods) isn't practical with plain Karabiner.
        ;; Some changes to timeout settings would be required, and the documentation is 
        ;; not clear enough.
        #_{:des "Convenient CTRL (T,Y) and COMMAND (G,H)"
         :rules  [
            [:##t        :left_control     nil         {:alone :t}]
            [:##y        :left_control     nil         {:alone :y}]
            [:##g        :left_command     nil         {:alone :g}]
            [:##h        :left_command     nil         {:alone :h}]
          ]}

 ]
}

